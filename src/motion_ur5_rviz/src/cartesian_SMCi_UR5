#!/usr/bin/env python3

# ============================================================
#	Project :   Concytec - UTEC
# 	Alumno  :   Jhon Charaja
# 	Info	:	Cartesian SMC controller with optimal adaptation 
#				in terms of position and jerk error.
"""
Simulation setup:
-----------------
	
	Fixed parameters:
	----------------
	- Circular trajectory of radius 0.5 m in the XY plane. (just for now)
	- Sinusoidal trajectory of amplitude 0.2 m in the Z axis. (just for nonw)
	- Trayectories period of 10 seconds. (just for nonw)
	- Control signals are sent to robot each 10 ms.
	- We set ikine_pose_ur5 to just do 10 iteration and obtain pose error of 1e-7 (orientation with angle/axis representation)

	Experiments 1:
	--------------
	- Evaluate robustness considering parametric uncertainties (0.5M 0.1M)
	- Compare trajectory tracking error obtained with fixed gains and optimized gains.
	- This experiments will demostrate the variation the improvement reducing trajectory tracking error (position and jerk). 
	- The figure will contains four plots and its size will be half-page.
	- Maybe another figure indicating variation of control gains.

	Experiments 2:
	--------------
	- Evaluate robustness considering external forces (1N 3N 5N)

	Experiments 3:
	--------------
	- Evaluate stability and performance considering different learning rates (0.1 0.5 0.8)
	- 

	Experiments 4:
	--------------
	- Evaluate stability and performance considering different learning rates and simulation time(50 and 500 secs)

	Notes:
	-----
	- option 1: orientation will be represented with RPY and its derivatives (just to show orientation tracking)
	- option 2: just show orientation error using axis/angle representation.
	- tracking error close to 0
	- system is stable with disturbance 0.90*M and reduce tracking error (fast)
	- system is stable with disturbance 0.50*M and reduce tracking error (regular)
	- system is unstable with disturbance 0.10*M
	- for high disturbances I recommend to use gamma >=0.9
	Updates:
	-------
	- 
	- new formulation of dP2_J (working)
	- new library to compute dynamic model (pinocchio)
	- new represention of orientation (axis/angle)

"""
# ============================================================

# ============================
# 			Libraries
# ============================ 
import rospy 							# ROS with Python
import os 								# Manipulate path names
import pandas as pd 					# Save data
from sensor_msgs.msg import JointState 	# To send angular position to robot
from labpythonlib.lab_functions import *
from labpythonlib.lab_markers import *	

# =============
# 	Save data
# =============
origin_data   = '../data'
origin_images = '../document/images'
trajectory_type 	= './SMCi/circular_traj'
pwd = os.path.dirname(os.path.realpath(__file__))
folder_data = os.path.join(pwd, origin_data, trajectory_type)
folder_images = os.path.join(pwd, origin_images, trajectory_type)

# Creates folder_data if it does not exist
if not os.path.exists(folder_data):
	os.makedirs(folder_data)
if not os.path.exists(folder_images):
	os.makedirs(folder_images)

column_names = [
	't',

	'x_med', 'y_med', 'z_med',
	'dx_med', 'dy_med', 'dz_med',	
	'ddx_med', 'ddy_med', 'ddz_med',
	'dddx_med', 'dddy_med', 'dddz_med',

	'x_ref', 'y_ref', 'z_ref',
	'dx_ref', 'dy_ref', 'dz_ref',
	'ddx_ref', 'ddy_ref', 'ddz_ref',
	'dddx_ref', 'dddy_ref', 'dddz_ref',

    'roll_med', 'pitch_med', 'yaw_med',
	'roll_ref', 'pitch_ref', 'yaw_ref',
	'roll_e', 'pitch_e', 'yaw_e',

	'q1_med', 'q2_med', 'q3_med', 'q4_med', 'q5_med', 'q6_med',
	'dq1_med', 'dq2_med', 'dq3_med', 'dq4_med', 'dq5_med', 'dq6_med',
	'ddq1_med', 'ddq2_med', 'ddq3_med', 'ddq4_med', 'ddq5_med', 'ddq6_med',

	'q1_ref', 'q2_ref', 'q3_ref', 'q4_ref', 'q5_ref', 'q6_ref',
	'dq1_ref', 'dq2_ref', 'dq3_ref', 'dq4_ref', 'dq5_ref', 'dq6_ref',
	'ddq1_ref', 'ddq2_ref', 'ddq3_ref', 'ddq4_ref', 'ddq5_ref', 'ddq6_ref',

	'L1', 'L2', 'L3', 'L4', 'L5', 'L6',
	'K1', 'K2', 'K3', 'K4', 'K5', 'K6',

	'u1', 'u2', 'u3', 'u4', 'u5', 'u6',

	'J1', 'J2', 'J3', 'J4', 'J5', 'J6'
	]

df = pd.DataFrame(columns=column_names,dtype=object)

# ===============================
# 		Configuration of node
# ===============================
# Create a nodo: SMC_controller
rospy.init_node("SMCi_controller_ur5")
# Public in topic /joint_states	to send joint data		
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
# Loop rate (in Hz)
rate 	= rospy.Rate(100)		# 100 [Hz]
dt 		= 10e-3					# 10  [ms]
# object(message) type JointState
jstate = JointState()

# ===============================
# 		Line and Ball Marker
# ===============================
# Show a ball marker for current and desired position of robot' end-effector
bmarker_des 	= BallMarker(color['GREEN'])
bmarker_act  	= BallMarker(color['YELLOW'])

# =======================================
# 	Set home joint configuration of UR5
# =======================================
#  Home joint configuration of ur5 robot (radians)
q0 = np.array([-0.22007212, -0.72670633, -4.72730825,  0.7416256,   1.57079633, -3.36166477]) # Center [0.5 +0.0 0.0]
dq0 = np.zeros(6)
ddq0 = np.zeros(6)
ddq0 = np.zeros(6) 
# reference trajectory: position, velocity and acceleration
q_ref =   copy(q0)
dq_ref =  np.zeros(6) 
ddq_ref = np.zeros(6) 
dddq_ref = np.zeros(6)
# measured trajectory: position, velocity and acceleration
q_med =   copy(q0)
dq_med =  np.zeros(6) 
ddq_med = np.zeros(6) 
ddq_med = np.zeros(6)
# error trajectory: position, velocity and acceleration
q_e = np.zeros(6)
dq_e =  np.zeros(6) 
ddq_e = np.zeros(6) 
ddq_e = np.zeros(6)

# ===========================
#   UR5 robot configuration
# ===========================
# joints name of UR5 robot
jnames = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint','wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']
# path of labs_ur5.urdf
urdf_path = os.path.join(pwd,'../../ur5_description/urdf/ur5_joint_limited_robot.urdf')
# the class robot load labs_ur5.urdf
ur5_robot = Robot(q0, dq0, dt, urdf_path)
# number of degress of freedom
ndof = ur5_robot.ndof

# create inertia matrix 
M = np.zeros([ndof,ndof])
M_p = np.zeros([6,6])
# create nonlinear effects vector
b = np.zeros(ndof)
b_p = np.zeros(6)

# ==============================================
#   set initial cartesian configuration of UR5
# ==============================================
# initial cartesian configuration: position, velocity and acceleration
p0 = np.zeros(3)
rpy0 = np.zeros(3)
p0, R0 = ur5_robot.forward_kinematics(q0)
rpy0 = rot2rpy(R0)

dp0 = np.zeros(3)
w0  = np.zeros(3)
dp0, w0 = ur5_robot.twist(q0, dq0)

ddp0 = np.zeros(3)
dw0 = np.zeros(3)
ddp0, dw0 = ur5_robot.dtwist(q0, dq0, ddq0)

dddp0 = np.zeros(3) # requires estimation tecnique

# desired cartesian trajectory: position, velocity and acceleration
p_des = np.zeros(3)
rpy_des = np.zeros(3)
R_des = np.array([[0, 0, 1],[0, 1, 0],[-1, 0, 0]])
rpy_des = rot2rpy(R_des)

dp_des = np.zeros(3)
w0_des = np.zeros(3)

ddp_des = np.zeros(3)
dw0_des = np.zeros(3)

dddp_des = np.zeros(3)

# reference cartesian trajectory: position, velocity and acceleration
p_ref = copy(p0)
rpy_ref = copy(rpy0)
drpy_ref = np.zeros(3)
ddrpy_ref = np.zeros(3)

dp_ref = copy(dp0)
w_ref = copy(w0)

ddp_ref = copy(ddp0)
dw_ref = copy(dw0)

dddp_ref = np.zeros(3)

# measured cartesian trajectory: position, velocity and acceleration
p_med = copy(p0)
R_med = copy(R0)
rpy_med = copy(rpy0)

dp_med = copy(dp0)
w_med = copy(w0)

ddp_med = copy(ddp0)
dw_med = copy(dw0)

dddp_med = np.zeros(3)

# Cartesian error
p_e    = np.zeros(6)
dp_e   = np.zeros(6)
ddp_e  = np.zeros(6)
dddp_e = np.zeros(6)

# ================================
# 			SMC controller
# ================================
alpha = 0.0 # 10 15 20
gamma = 0.9
beta  = 0.1
delta = 0.1
Lambda = 5*np.array([1, 1, 1, 1, 1, 1])
K 	   = 1*np.array([1, 1, 1, 1, 1, 1])

dJ_Lambda = np.zeros(6)
dJ_K 	  = np.zeros(6)
dLambda   = np.zeros(6)
dLambda_p = np.zeros(6)
ddLambda  = np.zeros(6)
dK 	      = np.zeros(6)

s  = np.zeros(6)
ds = np.zeros(6)
u  = np.zeros(6)
up = np.zeros(6)
# ================================
# 		Dynamic simulation
# ================================
t = 0.0
t_reach = 50 # 1 min

# Filename
fn = "cartesian_"+"L"+str(Lambda[0])+"_K_"+str(K[0])+"_alpha_"+str(alpha)+"_beta_"+str(beta)+"_gamma_"+str(gamma)+"_delta_"+str(delta)+"_t_"+str(t_reach)+".csv"

# save file .csv
path = os.path.join(folder_data, fn)
df.to_csv(path, index=False)

while not rospy.is_shutdown():
	# desired values (cartesian space)
	p_des, dp_des, ddp_des, dddp_des = circular_trayectory_generator(t)
	
	# reference position at Cartesian space
	p_ref, dp_ref, ddp_ref = reference_trajectory(p_des, p_ref, dp_ref, dt)
	# reference orientation with Euler angles (ZYX)
	rpy_ref, drpy_ref, ddrpy_ref = reference_trajectory(rpy_des, rpy_ref, drpy_ref, dt)
	R_ref = rpy2rot(rpy_ref)
	w_ref = angular_velocity_rpy(rpy_ref, drpy_ref)
	dw_ref = angular_acceleration_rpy(rpy_ref, drpy_ref, ddrpy_ref)
	# desired pose acceleration
	ddp_w_ref = np.concatenate((ddp_ref,dw_ref), axis=0)

	# Cartesian error: position
	p_e[0:3]   =  p_ref - p_med # [3x3]
	dp_e[0:3]  =  dp_ref - dp_med
	ddp_e[0:3] =  ddp_ref - ddp_med

	# Carteisan error: orientation
	p_e[3:6] 	= axisangle_error(R_ref, R_med)
	dp_e[3:6] 	= w_ref - w_med
	ddp_e[3:6]  = dw_ref - dw_med

	# jacobian: pose [6x6]
	J = ur5_robot.geometric_jacobian(q_med)  
	# jacobian: damped pseudo-inverse [6x6]
	J_inv = damped_pinv(J)   
	# jacobian: time-derivative [6x6]
	dJ = ur5_robot.geometric_jacobian_time_derivative(q_med, dq_med)

	# Computes inertia matrix
	M  = 1.0*ur5_robot.get_M()
	M_p = delta*damped_pinv(J.dot(np.linalg.inv(M).dot(J.T)))
	b = 1.0*ur5_robot.get_b()
	b_p = J_inv.T.dot(b) - M_p.dot(dJ.dot(dq_med))

	# s and ds
	s  = dp_e + np.multiply(Lambda, p_e)
	ds = ddp_e + np.multiply(dLambda, p_e) + np.multiply(Lambda, dp_e)
    
	# cartesian SM control + feedback linearization
	F = M_p.dot(ddp_w_ref + np.multiply(dLambda, p_e) + np.multiply(Lambda, dp_e) +\
			  np.multiply(K, np.tanh(s)) ) + b_p
	u = J.T.dot(F) 

	# Send control signal
	ur5_robot.send_control_command(u)

	# update states
	
	q_med, dq_med, ddq_med = ur5_robot.read_joint_position_velocity_acceleration()
	p_med, dp_med, ddp_med = ur5_robot.read_cartesian_position_velocity_acceleration()
	R_med = ur5_robot.read_ee_orientation()
	w_med, dw_med = ur5_robot.read_ee_angular_velocity_acceleration()
	# represent orientation with Euler angles
	#rpy_med = rot2rpy_unwrapping(R_med, rpy_med)
	#rpy_med = copy(p_e[3:6])
	angle_med, axis_med = rot2axisangle(R_med)
	axis_angle_med = np.zeros(3)
	axis_angle_med = angle_med*axis_med

	angle_ref, axis_ref = rot2axisangle(R_ref)
	axis_angle_ref = np.zeros(3)
	axis_angle_ref = angle_ref*axis_ref

	axis_angle_e = axisangle_error(R_ref, R_med)

	# Publish message
	jstate.header.stamp = rospy.Time.now()
	jstate.name 		= jnames			# Joints position name
	jstate.position 	= q_med
	jstate.velocity 	= dq_med
	pub.publish(jstate)

	# Ball marker
	bmarker_des.xyz(p_ref[0:3])	# Green
	bmarker_act.xyz(p_med[0:3])	# Yellow

	# ================
	# 	optimization 
	# ================
	# derivative of Lambda and K
	dLambda  = -(alpha/dt) * (dJ_Lambda)
	ddLambda = (dLambda - dLambda_p)/dt # Better adaptation when ddLambda = 0
	dK 		 = -(alpha/dt) * (dJ_K)
	dLambda_p = dLambda 

	# Special parameters
	p1_tanh2 = np.ones(6) - np.multiply(np.tanh(s),np.tanh(s))
	p1_2Ltanh = np.ones(6) - np.multiply(np.multiply(np.multiply(2, Lambda), np.tanh(s)), ds)
	P1 = +s + np.multiply(K, np.tanh(s))
	P2 = -np.multiply(ddLambda, p_e) - np.multiply(np.multiply(dLambda, dp_e), 2) \
		 -np.multiply(Lambda, ddp_e) - np.multiply(dK, np.tanh(s)) \
		 -np.multiply(np.multiply(K, p1_tanh2), ds)
	
	# Cost function
	c = gamma*0.5*np.dot(P1.T,P1) + beta*0.5*np.dot(P2.T,P2) 	# [6x1]
	
	# Gradient descent
	dP1_q = -np.multiply(Lambda, np.ones(6)+np.multiply(K, p1_tanh2)) 	# [6x1]
	dP2_q = +ddLambda + np.multiply(np.multiply(dK, Lambda), p1_tanh2) \
			+np.multiply(np.multiply(K, p1_tanh2), p1_2Ltanh) 			# [6x1]
	
	# partial derivative of J (cost) with respecto to q(output)
	dJ_q = gamma*np.multiply(P1, dP1_q) + beta*np.multiply(P2, dP2_q)	# [6x1]

	# partial derivative of q (output) with respect to u (control)
	#nonzero = (u!=up) 	# to avoid problems when du=0
	dp_w_med = np.concatenate((dp_med, w_med), axis=0)
	du = (u-up)#*nonzero
	dq_du = np.sign(np.multiply(dp_w_med, du))

	du_Lambda = np.dot(M, dp_e)
	du_K 	  = np.dot(M, np.tanh(s)) # [6x1]

	dJ_Lambda = np.multiply(dJ_q, du_Lambda)							# [6x1]
	dJ_K 	  = np.multiply(dJ_q, du_K)

	# New value of Lambda
	#crit_p = (1000)*np.sqrt(np.sum(np.power(p_e[0:3],2))) 	# [mm]
	#crit_a = (180/np.pi)*np.sqrt(np.sum(np.power(q_e[0:6],2))) 	# [degrees]
	
	# Upgrade of control gains
	Lambda = Lambda - alpha*dJ_Lambda 	# [6x1]
	K  	= K - alpha*dJ_K 				# [6x1]
	

	# Print
	print("t: ", np.round(t,2))
	print("Lambda: ", Lambda)
	print("K: ", K) 
	#print("c:  ", c)
	#print("crit_p: ", crit_p)
	#print("crit_a: ", crit_a)

	print("\n")
	
	# Append data
	row = 	tl(np.array([t])) +\
			tl(p_med)+tl(dp_med)+tl(ddp_med)+tl(dddp_med) +\
			tl(p_ref)+tl(dp_ref)+tl(ddp_ref)+tl(dddp_ref) +\
			tl(axis_angle_med)+tl(axis_angle_ref)+tl(axis_angle_e) +\
			tl(q_med)+tl(dq_med)+tl(ddq_med) +\
			tl(q_ref)+tl(dq_ref)+tl(ddq_ref) +\
			tl(Lambda) +\
			tl(K) +\
			tl(u)  +\
			tl(np.array([c]))

	row = tl(np.expand_dims(np.array(row), axis = 1))
	# Fix for redimensionality
	df_row = pd.DataFrame.from_dict(dict(zip(column_names, row)))
	df.append(df_row, sort = False).to_csv(path, index=False, mode = 'a', header=False)
	
	# Update
	t = t + dt
	up = copy(u)
	
	if t>=(t_reach): # 60 sec
		print("Reached maximum of steps")
		print("data created with name: ", fn)
		break

	# Wait for the next iteration
	rate.sleep()
	
print('out because ctrl + c. Data saved.')


