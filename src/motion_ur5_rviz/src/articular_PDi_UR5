#!/usr/bin/env python3

# ============================================================
#	Curso   :   Concytec - UTEC
# 	Alumno  :   Jhon Charaja
# 	Info	:	articular PD controller with optimal adaptation 
#				in terms of position and jerk error.
"""
	Notes:
	-----

	Updates:
	-------
	- new library to compute dynamic model
	- new represention of orientation
	- 
"""
# ============================================================

# ============================
# 			Libraries
# ============================ 
import rospy 							# ROS with Python
import os 								# Manipulate path names
import pandas as pd 					# Save data
from sensor_msgs.msg import JointState 	# To send angular position to robot
from labpythonlib.lab_functions import *
from labpythonlib.lab_markers import *	

# =============
# 	Save data
# =============
origin 	= '../data/PDi'
file_name 	= 'circular_traj'
pwd = os.path.dirname(os.path.realpath(__file__))
folder = os.path.join(pwd, origin, file_name)

# Creates folder if it does not exist
if not os.path.exists(folder):
	os.makedirs(folder)

column_names = [
	't'
	]

df = pd.DataFrame(columns=column_names,dtype=object)


# ===============================
# 		Configuration of node
# ===============================
# Create a nodo: SMC_controller
rospy.init_node("PDi_controller_ur5")
# Public in topic /joint_states	to send joint data		
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
# Loop rate (in Hz)
rate 	= rospy.Rate(1000)		# 1000 [Hz]
dt 		= 1e-3					# 1  [ms]
# object(message) type JointState
jstate = JointState()

# ===============================
# 		Line and Ball Marker
# ===============================
# Show a ball marker for current and desired position of robot' end-effector
bmarker_des 	= BallMarker(color['GREEN'])
bmarker_act  	= BallMarker(color['YELLOW'])

# =======================================
# 	Set home joint configuration of UR5
# =======================================
#  Home joint configuration of ur5 robot (radians)
q0 = np.array([-0.22007212, -0.72670633, -4.72730825,  0.7416256,   1.57079633, -3.36166477]) # Center [0.5 +0.0 0.0]
dq0 = np.zeros(6)
ddq0 = np.zeros(6)
ddq0 = np.zeros(6) 
# reference trajectory: position, velocity and acceleration
q_ref =   copy(q0)
dq_ref =  np.zeros(6) 
ddq_ref = np.zeros(6) 
dddq_ref = np.zeros(6)
# measured trajectory: position, velocity and acceleration
q_med =   copy(q0)
dq_med =  np.zeros(6) 
ddq_med = np.zeros(6) 
ddq_med = np.zeros(6)

# ===========================
#   UR5 robot configuration
# ===========================
# joints name of UR5 robot
jnames = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint','wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']
# path of labs_ur5.urdf
urdf_path = os.path.join(pwd,'../../ur5_description/urdf/ur5_joint_limited_robot.urdf')
# the class robot load labs_ur5.urdf
ur5_robot = Robot(q0, dq0, dt, urdf_path)
# number of degress of freedom
ndof = ur5_robot.ndof

# create inertia matrix 
M = np.zeros([ndof,ndof])
# create nonlinear effects vector
b = np.zeros(ndof)
# create gravity vector
g = np.zeros(ndof)

# ==============================================
#   set initial cartesian configuration of UR5
# ==============================================
# initial cartesian configuration: position, velocity and acceleration
p0 = np.zeros(7)
p0[0:3], R0 = ur5_robot.forward_kinematics(q0)
p0[3:7] = rot2quat(R0)
dp0 = np.zeros(6)
ddp0 = np.zeros(6)
ddp0 = np.zeros(6)
# desired cartesian trajectory: position, velocity and acceleration
p_des = np.zeros(7)
p_des[0:3] = copy(p0[0:3])
R_des = np.array([[0, 0, 1],[0, 1, 0],[-1, 0, 0]])
#p_des[3:7] = np.array([0.01676998,  0.99985616,  0.00251062,  0.00]) # fixed orientation
dp_des = np.zeros(3)
ddp_des = np.zeros(3)
dddp_des = np.zeros(3)
# reference cartesian trajectory: position, velocity and acceleration
p_ref = np.zeros(7)
p_ref[0:3] = copy(p0[0:3])
p_ref[3:7] = copy(p0[3:7])
dp_ref = np.zeros(6)
ddp_ref = np.zeros(6)
dddp_reef = np.zeros(6)
# measured cartesian trajectory: position, velocity and acceleration
p_med = np.zeros(7)
p_med[0:3] = copy(p0[0:3])
p_med[3:7] = copy(p0[3:7])
dp_med = np.zeros(6)
ddp_med = np.zeros(6)
dddp_med = np.zeros(6)
# Error angular position, velocity and acceleration
p_e    = np.zeros(6)
dp_e   = np.zeros(6)
ddp_e  = np.zeros(6)
dddp_e = np.zeros(6)

# ================================
# 			PD controller
# ================================
alpha = 50*dt # 10 50 80
gamma = 0.8
beta  = 0.2
KP    = 5*np.array([1, 1, 1, 1, 1, 1])
KD    = 2*np.sqrt(KP)
dJ_KP = np.zeros(6)
dJ_KD = np.zeros(6)
dKP = np.zeros(6)
dKD = np.zeros(6)

u  = np.zeros(6)
up = np.zeros(6)

# ================================
# 		Dynamic simulation
# ================================
t = 0.0
t_reach = 60 # secs

# Filename
fn = "articular"+"_kp_"+str(KP[0])+"_alpha_"+str(alpha)+"_beta_"+str(beta)+"_gamma_"+str(gamma)+"_t_"+str(t_reach)+".csv"

# save file .csv
path = os.path.join(folder, fn)
df.to_csv(path, index=False)



"""
x = np.array([0.5, 0.0, 0.0])
R = copy(R_des)
q = ur5_robot.inverse_kinematics_pose(x, R, q0)

print("q: ", q)
print("x: ", ur5_robot.forward_kinematics(q))
"""

while not rospy.is_shutdown():
	# desired values (cartesian space)
	p_des[0:3], dp_des[0:3], ddp_des[0:3], dddp_des[0:3] = circular_trayectory_generator(t)
	
	# reference values (cartesian space)
	p_ref[0:3], dp_ref[0:3], ddp_ref[0:3] = reference_trajectory(p_des[0:3], p_ref[0:3], dp_ref[0:3], dt)
	#print("p_des: ", p_des[0:3])
	#print("p_ref: ", p_ref[0:3])
	
	# Inverse kinematics
	q_ref = ur5_robot.inverse_kinematics_pose(p_ref[0:3], R_des, q_ref)	# It starts with q_ref=copy(q0)
	#print("q: ", q_ref)
	# jacobian: position xyz [6x6]
	J = ur5_robot.geometric_jacobian(q_ref) 
	# jacobian: dampend pseudo-inverse [6x6] 
	J_pinv = damped_pinv(J)
	#print("J dim: ", J_pinv.shape)
	# jacobian: time derivative [6x6]
	dJ = ur5_robot.geometric_jacobian_time_derivative(q_ref, dq_ref)

	dq_ref = np.dot(J_pinv, dp_ref)
	ddq_ref = np.dot(J_pinv, ddp_ref - np.dot(dJ, dq_ref))
	
	# Error calculation
	e 	=  q_ref - q_med
	de 	=  dq_ref - dq_med
	dde =  ddq_ref - ddq_med

	# Computes inertia matrix
	M  = ur5_robot.get_M()
	b = ur5_robot.get_b()
	# SMC articular + Feedback linearization
	u = M.dot(ddq_ref +  np.multiply(KP, e) + np.multiply(KD, de)) + b
	
	# Send control signal
	ur5_robot.send_control_command(u)

	# update states
	q_med, dq_med, ddq_med = ur5_robot.read_joint_position_velocity_acceleration()
	p_med[0:3], dp_med[0:3], ddp_med[0:3] = ur5_robot.read_cartesian_position_velocity_acceleration()

	# Publish message
	jstate.header.stamp = rospy.Time.now()
	jstate.name 		= jnames			# Joints position name
	jstate.position 	= q_med
	jstate.velocity 	= dq_med
	pub.publish(jstate)


	# Ball marker
	bmarker_des.xyz(p_ref[0:3])	# Green
	bmarker_act.xyz(p_med[0:3])	# Yellow
	
	# Print
	print("t: ", np.round(t,2))
	print("\n")

	# Append data
	row = tl(np.array([t]))
	row = tl(np.expand_dims(np.array(row), axis = 1))
	# Fix for redimensionality
	df_row = pd.DataFrame.from_dict(dict(zip(column_names, row)))
	df.append(df_row, sort = False).to_csv(path, index=False, mode = 'a', header=False)

	# Update
	t = t + dt
	
	if t>=(t_reach): # 60 sec
		print("Reached maximum of steps")
		break

	# Wait for the next iteration
	rate.sleep()
	
print('out because ctrl + c. Data saved.')

