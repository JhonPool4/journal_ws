#!/usr/bin/env python3

# ============================================================
#	Curso   :   Concytec - UTEC
# 	Alumno  :   Jhon Charaja
# 	Info	:	articular PD controller with optimal adaptation 
#				in terms of position and jerk error.
"""
	Notes:
	-----
	- Position error is more stable than jerk error
	- Jerk error show several peaks
	- A filter should be used to smooth the jerk error signal.
	- The optimization equations cause the control gains to stabilize at 0,
	  for control gains with initial value greather than 1. (Experimental observation)
	- For this reason, the simulation use 0.5 as initial control gain.
	
	Updates:
	-------
	- Reference model and trajectory
	- New formulation of dP2_q (dP2 / dq)
"""

# ============================================================

# ============================
# 			Libraries
# ============================ 
import rospy 							# ROS with Python
import os 								# Manipulate path names
import pandas as pd 					# Save data
from sensor_msgs.msg import JointState 	# To send angular position to robot
from markers import *					# To show a market ball 
from functions import *					# Forward Kinematics, Inverse Kinematics and Forward Dynamic
from roslib import packages				# Library with ROS packages
import rbdl								# Library to compute dynamic matrix H and B of robot



# ===============================
# 		Configuration of node
# ===============================
# Create a nodo: SMC_controller
rospy.init_node("PDi_controller_ur5")
cwd = os.path.dirname(os.path.realpath(__file__))
# Public in topic /joint_states	to send joint data		
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)

# ===============================
# 		Line and Ball Marker
# ===============================
# Show a ball marker for current and desired position of robot' end-effector
bmarker_des 	= BallMarker(color['RED'])
bmarker_act  	= BallMarker(color['YELLOW'])

# =============================================================
# 					Robot Dynamics
# =============================================================
modelo = rbdl.loadModel(os.path.join(cwd,'../../ur5_description/urdf/ur5_joint_limited_robot.urdf'))
#ndof   = modelo.q_size     # Degrees of Freedom
print("working")
