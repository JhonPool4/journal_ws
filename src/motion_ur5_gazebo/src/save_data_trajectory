#!/usr/bin/env python3
import os
import rospy
import pandas as pd
from my_control_gazebo.msg import AngularPosition
from my_control_gazebo.msg import AngularVelocity
from std_msgs.msg import Int64
from functions import *

class SaveDataTrayectory:  
    def __init__(self):
        self.start_command_sub    = rospy.Subscriber("PD_controller/f_start",Int64, self.startCB)
        self.position_command_sub = rospy.Subscriber('PD_controller/position_command', AngularPosition, self.position_command_CB)
        self.velocity_command_sub = rospy.Subscriber('PD_controller/velocity_command', AngularVelocity, self.velocity_command_CB)
        self.current_position_sub = rospy.Subscriber('PD_controller/current_position', AngularPosition, self.current_position_CB)
        self.current_velocity_sub = rospy.Subscriber('PD_controller/current_velocity', AngularVelocity, self.current_velocity_CB)
        
        # start flag
        self.f_start = 0
        # command states
        self.position_command = np.zeros(6)
        self.velocity_command = np.zeros(6)
        # current states
        self.current_position = np.zeros(6)
        self.current_velocity = np.zeros(6)

    def startCB(self, msg):
        self.f_start = msg.data
    
    def position_command_CB(self, msg):
        self.position_command[0] = msg.q1
        self.position_command[1] = msg.q2
        self.position_command[2] = msg.q3
        self.position_command[3] = msg.q4
        self.position_command[4] = msg.q5
        self.position_command[5] = msg.q6

    def velocity_command_CB(self, msg):
        self.velocity_command[0] = msg.dq1
        self.velocity_command[1] = msg.dq2
        self.velocity_command[2] = msg.dq3
        self.velocity_command[3] = msg.dq4
        self.velocity_command[4] = msg.dq5
        self.velocity_command[5] = msg.dq6

    def current_position_CB(self, msg):
        self.current_position[0] = msg.q1
        self.current_position[1] = msg.q2
        self.current_position[2] = msg.q3
        self.current_position[3] = msg.q4
        self.current_position[4] = msg.q5
        self.current_position[5] = msg.q6

    def current_velocity_CB(self, msg):
        self.current_velocity[0] = msg.dq1
        self.current_velocity[1] = msg.dq2
        self.current_velocity[2] = msg.dq3
        self.current_velocity[3] = msg.dq4
        self.current_velocity[4] = msg.dq5
        self.current_velocity[5] = msg.dq6

if __name__ == '__main__':
    # Create a nodo
    rospy.init_node("save_data_trajectory")
    
    # Loop rate (in Hz)
    rate 	= rospy.Rate(100)		# 100 [Hz]
    dt 		= 1e-2					# 10  [ms]    

    # Class
    save_data=SaveDataTrayectory()

    # Create directory to save data
    origin 	= './Data/PDi'
    suffix 	= 'circular_traj'
    cwd = os.path.dirname(os.path.realpath(__file__))
    folder = os.path.join(cwd, origin, suffix)

    column_names = [
        'q1', 'q2', 'q3', 'q4', 'q5', 'q6',
        'dq1', 'dq2', 'dq3', 'dq4', 'dq5', 'dq6',
        'q1_des', 'q2_des', 'q3_des', 'q4_des', 'q5_des', 'q6_des',
        'dq1_des', 'dq2_des', 'dq3_des', 'dq4_des', 'dq5_des', 'dq6_des'
    ]
    df = pd.DataFrame(columns=column_names)

    # Filename
    #fn = "articular"+"_kp_"+str(KP[0])+"_alpha_"+str(alpha)+"_beta_"+str(beta)+"_gamma_"+str(gamma)+"_t_"+str(t_reach)+".csv"
    fn = "borrar_articular_test"

    # Creates folder if it does not exist
    if not os.path.exists(folder):
        os.makedirs(folder)

    path = os.path.join(folder, fn)
    df.to_csv(path, index=False) 

    # position and velocity vectors
    q  = np.zeros(6)
    dq = np.zeros(6)
    q_des  = np.zeros(6)
    dq_des = np.zeros(6)

    while not rospy.is_shutdown():
        if (save_data.f_start == 1):
            q = save_data.current_position
            dq= save_data.current_velocity
            q_des = save_data.position_command
            dq_des= save_data.velocity_command
            if np.linalg.norm(q_des) != 0:
                # Append data
                row = tl(q)+tl(dq) + tl(q_des)+tl(dq_des)
                row = tl(np.expand_dims(np.array(row), axis = 1))

                # Fix for redimensionality
                df_row = pd.DataFrame.from_dict(dict(zip(column_names, row)))
                df.append(df_row, sort = False).to_csv(path, index=False, mode = 'a', header=False)    
                rate.sleep()  
        else:
          # wait
          print("waiting start signal...")