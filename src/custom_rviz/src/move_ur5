#!/usr/bin/env python3

# ============================
# 			Libraries
# ============================ 
import rospy 							# ROS with Python
import os 								# Manipulate path names
import pandas as pd 					# Save data
from sensor_msgs.msg import JointState 	# To send angular position to robot
from custom_rviz.msg import CartesianPoseError
from labpythonlib.lab_functions import *
from labpythonlib.lab_markers import *	


# ===============================
# 		Configuration of node
# ===============================
# Create a nodo: PD_controller
rospy.init_node("move_ur5")
# Public in topic /joint_states	to send joint data		
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
# Loop rate (in Hz)
rate 	= rospy.Rate(100)		# 100 [Hz]
dt 		= 10e-3					# 10  [ms]
# object(message) type JointState
jstate = JointState()
pose_error = CartesianPoseError()
pub_pose_error = rospy.Publisher('cartesian_pose_error', CartesianPoseError, queue_size=1000)

# ===============================
# 		Ball and Frame Marker
# ===============================
# Show a ball marker for current and desired position of robot' end-effector
bmarker_ref 	= BallMarker(color['GREEN'], alpha=0.5)
bmarker_act  	= BallMarker(color['YELLOW'])
fmarker_ref     = FrameMarker(xyz_pos=[0.5, 0, 0], alpha=0.5)
fmarker_act     = FrameMarker(xyz_pos=[0.5, 0, 0], alpha=1)

# =======================================
# 	Set home joint configuration of UR5
# =======================================
#  Home joint configuration of ur5 robot (radians)
q0 = np.array([-0.22007212, -0.72670633, -4.72730825,  0.7416256,   1.57079633, -3.36166477]) # Center [0.5 +0.0 0.0]
dq0 = np.zeros(6)

# measured trajectory: position, velocity and acceleration
q_med =   copy(q0)
dq_med =  np.zeros(6) 
ddq_med = np.zeros(6) 

# ===========================
#   UR5 robot configuration
# ===========================
# joints name of UR5 robot
jnames = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint','wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']

# nominal model of ur5 robot  
urdf_path = rospy.get_param('/nominal_ur5_urdf')
# the class robot loads ur5.urdf
robot = Robot(q0, dq0, dt, urdf_path)

# ==============================================
#   set initial cartesian configuration of UR5
# ==============================================
# initial cartesian configuration: position, velocity and acceleration
p_med = np.zeros(3)
p_med, R_med = robot.forward_kinematics(q0)

dp_med = np.zeros(3)
ddp_med = np.zeros(3)
w_med = np.zeros(3)

# reference
p_ref = np.zeros(3)
p_ref, R_ref = robot.forward_kinematics(q0)
rpy_ref = rot2rpy(R_ref)

dp_ref = np.zeros(3)
drpy_ref = np.zeros(3)

# desired orientation
rpy_des = rot2rpy(R_ref)

# Cartesian error
p_e    = np.zeros(6)
dp_e   = np.zeros(6)

# ================================
# 			PD controller
# ================================
KP    = np.array([9, 9, 9, 9, 9, 9])
KD    = np.array([6, 6, 6, 6, 6, 6])

# ================================
# 		Dynamic simulation
# ================================
t = 0.0 				# @param current simulation time

#column_names = ['t','e_x', 'e_y', 'e_z', 'e_or', 'e_op', 'e_oy', 'de_x', 'de_y', 'de_z', 'de_or', 'de_op', 'de_oy']
column_names = ['t', 'e_p', 'e_o', 'ddde_p', 'ddde_o']
df = pd.DataFrame(columns=column_names,dtype=object)

# save file .csv
fn = 'dummy.csv'
pwd = os.path.dirname(os.path.realpath(__file__))
df.to_csv(os.path.join(pwd,fn), index=False)

while not rospy.is_shutdown():
    
    # desired values (cartesian space)
    p_des, _, _, _ = circular_trayectory_generator(t)
    # desired orientation (Euler angles ZYX)
    rpy_des[0]=np.pi/4*np.sin(2*np.pi/10*t) 

    # reference position at Cartesian space
    p_ref, dp_ref, ddp_ref = reference_trajectory(p_des, p_ref, dp_ref, dt)
    rpy_ref, drpy_ref, ddrpy_ref = reference_trajectory(rpy_des, rpy_ref, drpy_ref, dt)
    R_ref = rpy2rot(rpy_ref)
    w_ref = angular_velocity_rpy(rpy_ref, drpy_ref)
    dw_ref = angular_acceleration_rpy(rpy_ref, drpy_ref, ddrpy_ref)
    # desired pose acceleration
    ddpw_ref = np.concatenate((ddp_ref,dw_ref), axis=0)

    # Cartesian error: position
    p_e[0:3]   =  p_ref - p_med # [3x3]
    dp_e[0:3]  =  dp_ref - dp_med
    
    # Carteisan error: orientation
    p_e[3:6] 	= axisangle_error(R_ref, R_med)
    dp_e[3:6] 	= w_ref - w_med

    # jacobian: pose [6x6]
    J = robot.geometric_jacobian(q_med)  
    # jacobian: damped pseudo-inverse [6x6]
    J_inv = damped_pinv(J)   
    # jacobian: time-derivative [6x6]
    dJ = robot.geometric_jacobian_time_derivative(q_med, dq_med)

    # computes robot dynamics (Cartesian space)
    M  = robot.get_M() 
    M_p = damped_pinv(J.dot(np.linalg.inv(M).dot(J.T))) # inertia matrix at Cartesian space

    b = robot.get_b() 
    b_p = J_inv.T.dot(b) - M_p.dot(dJ.dot(dq_med)) # nonlinear effects vector at Joint space at Cartesian space

    # cartesian PD control + Feedback linearization
    F = M_p.dot(ddpw_ref + np.multiply(KP, p_e) + np.multiply(KD, dp_e)) + b_p
    u = J.T.dot(F) 

    # Send control signal
    robot.send_control_command(u)

    # update states
    q_med, dq_med, _ = robot.read_joint_position_velocity_acceleration()
    p_med, dp_med, _ = robot.read_cartesian_position_velocity_acceleration()
    R_med = robot.read_ee_orientation()
    w_med, dw_med = robot.read_ee_angular_velocity_acceleration()

    # Ball marker
    bmarker_ref.xyz(p_ref[0:3])	# Green
    bmarker_act.xyz(p_med[0:3])	# Yellow          
    # Frame marker
    fmarker_ref.xyz(p_ref[0:3]) 
    fmarker_act.xyz(p_med[0:3])
    fmarker_ref.rotation(R_ref) 
    fmarker_act.rotation(R_med)

    bmarker_ref.publish()
    bmarker_act.publish()

    fmarker_ref.publish()
    fmarker_act.publish()

    # Publish message
    jstate.header.stamp = rospy.Time.now()
    jstate.name 		= jnames			# Joints position name
    jstate.position 	= q_med
    jstate.velocity 	= dq_med
    pub.publish(jstate)
        
    pose_error.time = t
    pose_error.ep = np.linalg.norm(p_e[0:3])
    pose_error.eo = np.linalg.norm(p_e[3:6])
    pose_error.dddep = np.linalg.norm(dp_e[0:3])
    pose_error.dddeo = np.linalg.norm(dp_e[3:6])
    pub_pose_error.publish(pose_error)

    # save data
    row = tl(np.array([t, \
            np.linalg.norm(p_e[0:3]), \
            np.linalg.norm(p_e[3:6]), \
            np.linalg.norm(dp_e[0:3]), \
            np.linalg.norm(dp_e[3:6])     ]))
    row = tl(np.expand_dims(np.array(row), axis = 1))
    # Fix for redimensionality
    df_row = pd.DataFrame.from_dict(dict(zip(column_names, row)))
    df.append(df_row, sort = False).to_csv(os.path.join(pwd,fn), index=False, mode = 'a', header=False)    

    # Update
    t = t + dt    
    if t>=(10): # 60 sec
        print("Reached maximum of steps")
        break

    # Wait for the next iteration
    rate.sleep()
