#!/usr/bin/env python3

# ROS libraries and messages
import rospy, os
from custom_rviz.msg import CartesianPoseError

# PyQT libraries
import sys
from rviz import bindings as rviz
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *

# Matplotlib libraries
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
import numpy as np
import pandas as pd

dir_name = os.path.dirname(__file__)

class RvizCamera():
    def __init__(self, camera_id):
        self.frame = rviz.VisualizationFrame() # Main container widget of the regular RViz application
        self.frame.setSplashPath("")           # Path to the image shown during loading
        self.frame.initialize()                # Instantiate the VisualizationManager, RViz central class

        # Read config file data into config object
        reader = rviz.YamlConfigReader()
        config = rviz.Config()
        reader.readFile(config, os.path.join(dir_name, "../config/journal_views.rviz"))

        # VisualizationFrame reads data from config
        self.frame.load(config)

        # Disable the menu bar, status bar, and "hide-docks" buttons
        self.frame.setMenuBar(None)
        self.frame.setStatusBar(None)
        self.frame.setHideButtonVisibility(False)

        # Return the VisualizationManager instance, required to make changes in RViz
        self.manager = self.frame.getManager()
        view_man = self.manager.getViewManager()
        view_man.setCurrentFrom(view_man.getViewAt(camera_id))


class MplCanvas(FigureCanvas):

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        # main figure

        font = {'family':'serif',
                'weight' : 'normal',
                'style': 'normal',
                'size'   : '20'}
        lines={'linewidth': '2',
                'linestyle': '-'}                
        axes = {'labelsize': 'large',
                'titlesize': 'large',
                'linewidth': '1',
                'grid': 'True',
                'facecolor': 'white',
                'edgecolor': 'k'}
        # pass in the dict as kwargs   
        plt.rc('font', **font)       
        plt.rc('lines', **lines)
        plt.rc('axes', **axes)
        max_x = 10
        min_y = -0.03
        max_y = 0.03
        #self.fig = plt.figure(figsize=(12,5), dpi=dpi)#
        self.fig = Figure(figsize=(width, height), dpi=dpi, tight_layout=True)
        FigureCanvas.__init__(self, self.fig)
        # position error
        self.ax1 = self.fig.add_subplot(2,2,1)
        self.ax1.set_xlabel('Time (s)')
        self.ax1.set_ylabel('Position error (mm)')
        self.ax1.set_xlim((0,max_x))
        self.ax1.set_ylim((min_y,max_y))
        self.line1, = self.ax1.plot([], [])
       # orientation error
        self.ax2 = self.fig.add_subplot(2,2,2)
        self.ax2.set_xlabel('Time (s)')
        self.ax2.set_ylabel('Orientation error (deg)')
        self.ax2.set_xlim((0,max_x))
        self.ax2.set_ylim((min_y,max_y))
        self.line2, = self.ax2.plot([], [])
       # jerk error
        self.ax3 = self.fig.add_subplot(2,2,3)
        self.ax3.set_xlabel('Time (s)')
        self.ax3.set_ylabel('Jerk position error (deg)')
        self.ax3.set_xlim((0,max_x))
        self.ax3.set_ylim((min_y,max_y))
        self.line3, = self.ax3.plot([], [])

        self.ax4 = self.fig.add_subplot(2,2,4)
        self.ax4.set_xlabel('Time (s)')
        self.ax4.set_ylabel('Jerk orientation error (deg)')
        self.ax4.set_xlim((0,max_x))
        self.ax4.set_ylim((min_y,max_y))
        self.line4, = self.ax4.plot([], [])

        self.ep_data = []
        self.eo_data = []
        self.dddep_data = []
        self.dddeo_data = []
        self.time_data = []
        self.counter = 0


    def update_figure(self, msg):   
        if self.counter%20==0:
            """
            pose_error = CartesianPoseError()
            pose_error.ep = msg.ep
            pose_error.eo = msg.ep
            pose_error.dddep = msg.dddep
            pose_error.dddeo = msg.dddeo 

            print(f"ep: {pose_error.ep}")        
            print(f"eo: {pose_error.eo}")        
            print(f"dddep: {pose_error.dddep}")        
            print(f"dddeo: {pose_error.dddeo}")       
            """         
            self.time_data.append(msg.time)
            self.ep_data.append(msg.ep)
            self.eo_data.append(msg.eo)
            self.dddep_data.append(msg.dddep)
            self.dddeo_data.append(msg.dddeo)

            self.line1.set_data(self.time_data, self.ep_data)
            self.line2.set_data(self.time_data, self.eo_data)
            self.line3.set_data(self.time_data, self.dddep_data)
            self.line4.set_data(self.time_data, self.dddeo_data)    
            self.draw()
        self.counter +=1
        
class MainWindow(QWidget):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        # App main configuration: title and size
        self.title = 'Journal: Custom RViz'
        self.sg = QDesktopWidget().screenGeometry()
        self.setWindowTitle(self.title)
        self.setGeometry(0, 0, self.sg.width(), self.sg.height())

        # App description: widgets and layouts
        self.setLayout(QHBoxLayout())
        self.rviz_layout = QVBoxLayout()
        self.plots_layout = QVBoxLayout()

        self.layout().addLayout(self.rviz_layout,2)
        self.layout().addLayout(self.plots_layout,2)
        
        # configuration of RViz cameras
        cam0 = RvizCamera(camera_id=0)
        cam1 = RvizCamera(camera_id=1) 
        self.rviz_layout.addWidget(cam0.frame)
        self.rviz_layout.addWidget(cam1.frame)

        # Plot
        self.canvas = MplCanvas(self, dpi=100)
        self.plots_layout.addWidget(self.canvas)      


        # ros communication
        rospy.init_node('interface_node')
        #rospy.Subscriber("joint_states", JointState, self.update_figure)
        self.sub = rospy.Subscriber("cartesian_pose_error", CartesianPoseError, self.update_figure)
    def update_figure(self, msg):
        self.canvas.update_figure(msg)
                


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = MainWindow()
    ex.show()
    sys.exit(app.exec_())